/* tslint:disable */
/* eslint-disable */
/**
 * NextRole API
 * NextRole API Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GPTMessage
 */
export interface GPTMessage {
    /**
     * 
     * @type {string}
     * @memberof GPTMessage
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof GPTMessage
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof GPTMessage
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof GPTMessage
     */
    'error'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface GenerateResumeRequest
 */
export interface GenerateResumeRequest {
    /**
     * 
     * @type {string}
     * @memberof GenerateResumeRequest
     */
    'job_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenerateResumeRequest
     */
    'instructions'?: string;
}
/**
 * 
 * @export
 * @interface GeneratedResume
 */
export interface GeneratedResume {
    /**
     * 
     * @type {GeneratedResumeBasics}
     * @memberof GeneratedResume
     */
    'basics'?: GeneratedResumeBasics;
    /**
     * 
     * @type {Array<GeneratedResumeWorkInner>}
     * @memberof GeneratedResume
     */
    'work'?: Array<GeneratedResumeWorkInner>;
    /**
     * 
     * @type {Array<GeneratedResumeVolunteerInner>}
     * @memberof GeneratedResume
     */
    'volunteer'?: Array<GeneratedResumeVolunteerInner>;
    /**
     * 
     * @type {Array<GeneratedResumeEducationInner>}
     * @memberof GeneratedResume
     */
    'education'?: Array<GeneratedResumeEducationInner>;
    /**
     * Specify any awards you have received throughout your professional career
     * @type {Array<GeneratedResumeAwardsInner>}
     * @memberof GeneratedResume
     */
    'awards'?: Array<GeneratedResumeAwardsInner>;
    /**
     * Specify any certificates you have received throughout your professional career
     * @type {Array<GeneratedResumeCertificatesInner>}
     * @memberof GeneratedResume
     */
    'certificates'?: Array<GeneratedResumeCertificatesInner>;
    /**
     * Specify your publications through your career
     * @type {Array<GeneratedResumePublicationsInner>}
     * @memberof GeneratedResume
     */
    'publications'?: Array<GeneratedResumePublicationsInner>;
    /**
     * List out your professional skill-set
     * @type {Array<GeneratedResumeSkillsInner>}
     * @memberof GeneratedResume
     */
    'skills'?: Array<GeneratedResumeSkillsInner>;
    /**
     * List any other languages you speak
     * @type {Array<GeneratedResumeLanguagesInner>}
     * @memberof GeneratedResume
     */
    'languages'?: Array<GeneratedResumeLanguagesInner>;
    /**
     * 
     * @type {Array<GeneratedResumeInterestsInner>}
     * @memberof GeneratedResume
     */
    'interests'?: Array<GeneratedResumeInterestsInner>;
    /**
     * Specify career projects
     * @type {Array<GeneratedResumeProjectsInner>}
     * @memberof GeneratedResume
     */
    'projects'?: Array<GeneratedResumeProjectsInner>;
}
/**
 * 
 * @export
 * @interface GeneratedResumeAwardsInner
 */
export interface GeneratedResumeAwardsInner {
    /**
     * e.g. One of the 100 greatest minds of the century
     * @type {string}
     * @memberof GeneratedResumeAwardsInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeAwardsInner
     */
    'date'?: string;
    /**
     * e.g. Time Magazine
     * @type {string}
     * @memberof GeneratedResumeAwardsInner
     */
    'awarder'?: string;
    /**
     * e.g. Received for my work with Quantum Physics
     * @type {string}
     * @memberof GeneratedResumeAwardsInner
     */
    'summary'?: string;
}
/**
 * 
 * @export
 * @interface GeneratedResumeBasics
 */
export interface GeneratedResumeBasics {
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeBasics
     */
    'name'?: string;
    /**
     * e.g. Web Developer
     * @type {string}
     * @memberof GeneratedResumeBasics
     */
    'occupation'?: string;
    /**
     * e.g. thomas@gmail.com
     * @type {string}
     * @memberof GeneratedResumeBasics
     */
    'email'?: string;
    /**
     * Phone number
     * @type {string}
     * @memberof GeneratedResumeBasics
     */
    'phone'?: string;
    /**
     * URL to personal homepage
     * @type {string}
     * @memberof GeneratedResumeBasics
     */
    'url'?: string;
    /**
     * Write a short 2-3 sentence biography about yourself
     * @type {string}
     * @memberof GeneratedResumeBasics
     */
    'summary'?: string;
    /**
     * 
     * @type {GeneratedResumeBasicsLocation}
     * @memberof GeneratedResumeBasics
     */
    'location'?: GeneratedResumeBasicsLocation;
    /**
     * Specify any number of social networks that you participate in
     * @type {Array<GeneratedResumeBasicsProfilesInner>}
     * @memberof GeneratedResumeBasics
     */
    'profiles'?: Array<GeneratedResumeBasicsProfilesInner>;
}
/**
 * 
 * @export
 * @interface GeneratedResumeBasicsLocation
 */
export interface GeneratedResumeBasicsLocation {
    /**
     * To add multiple address lines, use  . For example, 1234 Glücklichkeit Straße Hinterhaus 5. Etage li.
     * @type {string}
     * @memberof GeneratedResumeBasicsLocation
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeBasicsLocation
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeBasicsLocation
     */
    'city'?: string;
    /**
     * code as per ISO-3166-1 ALPHA-2, e.g. US, AU, IN
     * @type {string}
     * @memberof GeneratedResumeBasicsLocation
     */
    'countryCode'?: string;
    /**
     * The general region where you live. Can be a US state, or a province, for instance.
     * @type {string}
     * @memberof GeneratedResumeBasicsLocation
     */
    'region'?: string;
}
/**
 * 
 * @export
 * @interface GeneratedResumeBasicsProfilesInner
 */
export interface GeneratedResumeBasicsProfilesInner {
    /**
     * e.g. Facebook or Twitter
     * @type {string}
     * @memberof GeneratedResumeBasicsProfilesInner
     */
    'network'?: string;
    /**
     * e.g. neutralthoughts
     * @type {string}
     * @memberof GeneratedResumeBasicsProfilesInner
     */
    'username'?: string;
    /**
     * URL to the online profile
     * @type {string}
     * @memberof GeneratedResumeBasicsProfilesInner
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface GeneratedResumeCertificatesInner
 */
export interface GeneratedResumeCertificatesInner {
    /**
     * e.g. Certified Kubernetes Administrator
     * @type {string}
     * @memberof GeneratedResumeCertificatesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeCertificatesInner
     */
    'date'?: string;
    /**
     * URL, if relevant
     * @type {string}
     * @memberof GeneratedResumeCertificatesInner
     */
    'url'?: string;
    /**
     * e.g. CNCF
     * @type {string}
     * @memberof GeneratedResumeCertificatesInner
     */
    'issuer'?: string;
}
/**
 * 
 * @export
 * @interface GeneratedResumeEducationInner
 */
export interface GeneratedResumeEducationInner {
    /**
     * e.g. Massachusetts Institute of Technology
     * @type {string}
     * @memberof GeneratedResumeEducationInner
     */
    'institution'?: string;
    /**
     * URL to the academic institution\'s home page
     * @type {string}
     * @memberof GeneratedResumeEducationInner
     */
    'url'?: string;
    /**
     * e.g. Arts
     * @type {string}
     * @memberof GeneratedResumeEducationInner
     */
    'area'?: string;
    /**
     * e.g. Bachelor
     * @type {string}
     * @memberof GeneratedResumeEducationInner
     */
    'studyType'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeEducationInner
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeEducationInner
     */
    'endDate'?: string;
    /**
     * grade point average, e.g. 3.67/4.0
     * @type {string}
     * @memberof GeneratedResumeEducationInner
     */
    'score'?: string;
    /**
     * List notable courses/subjects
     * @type {Array<string>}
     * @memberof GeneratedResumeEducationInner
     */
    'courses'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GeneratedResumeInterestsInner
 */
export interface GeneratedResumeInterestsInner {
    /**
     * e.g. Philosophy
     * @type {string}
     * @memberof GeneratedResumeInterestsInner
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GeneratedResumeInterestsInner
     */
    'keywords'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GeneratedResumeLanguagesInner
 */
export interface GeneratedResumeLanguagesInner {
    /**
     * e.g. English, Spanish
     * @type {string}
     * @memberof GeneratedResumeLanguagesInner
     */
    'language'?: string;
    /**
     * e.g. Fluent, Beginner
     * @type {string}
     * @memberof GeneratedResumeLanguagesInner
     */
    'fluency'?: string;
}
/**
 * 
 * @export
 * @interface GeneratedResumeProjectsInner
 */
export interface GeneratedResumeProjectsInner {
    /**
     * e.g. The World Wide Web
     * @type {string}
     * @memberof GeneratedResumeProjectsInner
     */
    'name'?: string;
    /**
     * Short summary of project. e.g. Collated works of 2017.
     * @type {string}
     * @memberof GeneratedResumeProjectsInner
     */
    'description'?: string;
    /**
     * Specify multiple features
     * @type {Array<string>}
     * @memberof GeneratedResumeProjectsInner
     */
    'highlights'?: Array<string>;
    /**
     * Specify special elements involved
     * @type {Array<string>}
     * @memberof GeneratedResumeProjectsInner
     */
    'keywords'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeProjectsInner
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeProjectsInner
     */
    'endDate'?: string;
    /**
     * Url to the project
     * @type {string}
     * @memberof GeneratedResumeProjectsInner
     */
    'url'?: string;
    /**
     * Specify your role on this project or in company
     * @type {Array<string>}
     * @memberof GeneratedResumeProjectsInner
     */
    'roles'?: Array<string>;
    /**
     * Specify the relevant company/entity affiliations e.g. \'greenpeace\', \'corporationXYZ\'
     * @type {string}
     * @memberof GeneratedResumeProjectsInner
     */
    'entity'?: string;
    /**
     *  e.g. \'volunteering\', \'presentation\', \'talk\', \'application\', \'conference\'
     * @type {string}
     * @memberof GeneratedResumeProjectsInner
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface GeneratedResumePublicationsInner
 */
export interface GeneratedResumePublicationsInner {
    /**
     * e.g. The World Wide Web
     * @type {string}
     * @memberof GeneratedResumePublicationsInner
     */
    'name'?: string;
    /**
     * e.g. IEEE, Computer Magazine
     * @type {string}
     * @memberof GeneratedResumePublicationsInner
     */
    'publisher'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumePublicationsInner
     */
    'releaseDate'?: string;
    /**
     * URL to the publication
     * @type {string}
     * @memberof GeneratedResumePublicationsInner
     */
    'url'?: string;
    /**
     * Short summary of publication. e.g. Discussion of the World Wide Web, HTTP, HTML.
     * @type {string}
     * @memberof GeneratedResumePublicationsInner
     */
    'summary'?: string;
}
/**
 * 
 * @export
 * @interface GeneratedResumeSkillsInner
 */
export interface GeneratedResumeSkillsInner {
    /**
     * e.g. Web Development
     * @type {string}
     * @memberof GeneratedResumeSkillsInner
     */
    'name'?: string;
    /**
     * e.g. Master
     * @type {string}
     * @memberof GeneratedResumeSkillsInner
     */
    'level'?: string;
    /**
     * List some keywords pertaining to this skill
     * @type {Array<string>}
     * @memberof GeneratedResumeSkillsInner
     */
    'keywords'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GeneratedResumeVolunteerInner
 */
export interface GeneratedResumeVolunteerInner {
    /**
     * e.g. Facebook
     * @type {string}
     * @memberof GeneratedResumeVolunteerInner
     */
    'organization'?: string;
    /**
     * e.g. Software Engineer
     * @type {string}
     * @memberof GeneratedResumeVolunteerInner
     */
    'position'?: string;
    /**
     * URL to organization website
     * @type {string}
     * @memberof GeneratedResumeVolunteerInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeVolunteerInner
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeVolunteerInner
     */
    'endDate'?: string;
    /**
     * Give an overview of your responsibilities at the company
     * @type {string}
     * @memberof GeneratedResumeVolunteerInner
     */
    'summary'?: string;
    /**
     * Specify accomplishments and achievements
     * @type {Array<string>}
     * @memberof GeneratedResumeVolunteerInner
     */
    'highlights'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GeneratedResumeWorkInner
 */
export interface GeneratedResumeWorkInner {
    /**
     * e.g. Facebook
     * @type {string}
     * @memberof GeneratedResumeWorkInner
     */
    'name'?: string;
    /**
     * e.g. Menlo Park, CA
     * @type {string}
     * @memberof GeneratedResumeWorkInner
     */
    'location'?: string;
    /**
     * e.g. Social Media Company
     * @type {string}
     * @memberof GeneratedResumeWorkInner
     */
    'description'?: string;
    /**
     * e.g. Software Engineer
     * @type {string}
     * @memberof GeneratedResumeWorkInner
     */
    'position'?: string;
    /**
     * URL to company website
     * @type {string}
     * @memberof GeneratedResumeWorkInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeWorkInner
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedResumeWorkInner
     */
    'endDate'?: string;
    /**
     * Give an overview of your responsibilities at the company
     * @type {string}
     * @memberof GeneratedResumeWorkInner
     */
    'summary'?: string;
    /**
     * Specify multiple accomplishments
     * @type {Array<string>}
     * @memberof GeneratedResumeWorkInner
     */
    'highlights'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    'status'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GenericResponse
     */
    'value'?: boolean;
}
/**
 * 
 * @export
 * @interface JobPost
 */
export interface JobPost {
    /**
     * 
     * @type {string}
     * @memberof JobPost
     */
    'job_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPost
     */
    'job_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPost
     */
    'company_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPost
     */
    'company_info'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPost
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPost
     */
    'salary'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPost
     */
    'logo_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPost
     */
    'job_board'?: string;
    /**
     * 
     * @type {Array<JobPostJobDescriptionInner>}
     * @memberof JobPost
     */
    'job_description'?: Array<JobPostJobDescriptionInner>;
}
/**
 * 
 * @export
 * @interface JobPostJobDescriptionInner
 */
export interface JobPostJobDescriptionInner {
    /**
     * 
     * @type {string}
     * @memberof JobPostJobDescriptionInner
     */
    'text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof JobPostJobDescriptionInner
     */
    'is_match'?: boolean;
}
/**
 * 
 * @export
 * @interface ParseJobPostRequest
 */
export interface ParseJobPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ParseJobPostRequest
     */
    'job_board'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParseJobPostRequest
     */
    'job_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParseJobPostRequest
     */
    'job_id'?: string;
}
/**
 * 
 * @export
 * @interface PdfGenerateRequest
 */
export interface PdfGenerateRequest {
    /**
     * 
     * @type {string}
     * @memberof PdfGenerateRequest
     */
    'template_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PdfGenerateRequest
     */
    'format'?: string;
    /**
     * 
     * @type {string}
     * @memberof PdfGenerateRequest
     */
    'env'?: string;
    /**
     * 
     * @type {string}
     * @memberof PdfGenerateRequest
     */
    'data'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PdfGenerateRequest
     */
    'debug'?: boolean;
}
/**
 * 
 * @export
 * @interface ResumeData
 */
export interface ResumeData {
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface ResumeList
 */
export interface ResumeList {
    /**
     * 
     * @type {Array<ResumeMetaData>}
     * @memberof ResumeList
     */
    'resumes'?: Array<ResumeMetaData>;
}
/**
 * 
 * @export
 * @interface ResumeMetaData
 */
export interface ResumeMetaData {
    /**
     * 
     * @type {string}
     * @memberof ResumeMetaData
     */
    'resume_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResumeMetaData
     */
    'company_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResumeMetaData
     */
    'job_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResumeMetaData
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResumeMetaData
     */
    'company_logo'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResumeMetaData
     */
    'updated_at'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResumeMetaData
     */
    'created_at'?: number;
}
/**
 * 
 * @export
 * @interface ResumeTemplateUpdateRequest
 */
export interface ResumeTemplateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ResumeTemplateUpdateRequest
     */
    'resume_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResumeTemplateUpdateRequest
     */
    'new_template_id'?: string;
}
/**
 * 
 * @export
 * @interface ResumeUpdateRequest
 */
export interface ResumeUpdateRequest {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ResumeUpdateRequest
     */
    'fields'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface ResumeUploadRequest
 */
export interface ResumeUploadRequest {
    /**
     * 
     * @type {string}
     * @memberof ResumeUploadRequest
     */
    'file'?: string;
}
/**
 * 
 * @export
 * @interface ResumeUploadResponse
 */
export interface ResumeUploadResponse {
    /**
     * 
     * @type {string}
     * @memberof ResumeUploadResponse
     */
    'resume_id'?: string;
}
/**
 * 
 * @export
 * @interface SaveStyleRequest
 */
export interface SaveStyleRequest {
    /**
     * 
     * @type {string}
     * @memberof SaveStyleRequest
     */
    'template_id'?: string;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof SaveStyleRequest
     */
    'payload'?: Array<{ [key: string]: any; }>;
}
/**
 * 
 * @export
 * @interface SessionUser
 */
export interface SessionUser {
    /**
     * 
     * @type {string}
     * @memberof SessionUser
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionUser
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionUser
     */
    'username'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SessionUser
     */
    'anonymous'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SessionUser
     */
    'token'?: string;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof SessionUser
     */
    'roles'?: { [key: string]: boolean; };
}
/**
 * 
 * @export
 * @interface StringValue
 */
export interface StringValue {
    /**
     * 
     * @type {string}
     * @memberof StringValue
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface TokenUsage
 */
export interface TokenUsage {
    /**
     * 
     * @type {number}
     * @memberof TokenUsage
     */
    'prompt_tokens'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenUsage
     */
    'completion_tokens'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenUsage
     */
    'total_tokens'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TokenUsage
     */
    'function_call_aggregate'?: boolean;
}
/**
 * 
 * @export
 * @interface UserCompletionRequest
 */
export interface UserCompletionRequest {
    /**
     * 
     * @type {Array<GPTMessage>}
     * @memberof UserCompletionRequest
     */
    'messages': Array<GPTMessage>;
    /**
     * 
     * @type {string}
     * @memberof UserCompletionRequest
     */
    'project_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCompletionRequest
     */
    'model'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserCompletionRequest
     */
    'max_tokens'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserCompletionRequest
     */
    'temperature'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserCompletionRequest
     */
    'function_call'?: string;
}
/**
 * 
 * @export
 * @interface UserCompletionResponse
 */
export interface UserCompletionResponse {
    /**
     * 
     * @type {string}
     * @memberof UserCompletionResponse
     */
    'model'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCompletionResponse
     */
    'object'?: string;
    /**
     * 
     * @type {Array<GPTMessage>}
     * @memberof UserCompletionResponse
     */
    'messages'?: Array<GPTMessage>;
    /**
     * 
     * @type {TokenUsage}
     * @memberof UserCompletionResponse
     */
    'usage'?: TokenUsage;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof UserCompletionResponse
     */
    'error'?: { [key: string]: any; };
}

/**
 * PdfApi - axios parameter creator
 * @export
 */
export const PdfApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Convert html to PDF
         * @summary Convert html to PDF
         * @param {PdfGenerateRequest} pdfGenerateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertToPdf: async (pdfGenerateRequest: PdfGenerateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pdfGenerateRequest' is not null or undefined
            assertParamExists('convertToPdf', 'pdfGenerateRequest', pdfGenerateRequest)
            const localVarPath = `/pdf/convert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pdfGenerateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save css styling for an html template
         * @summary Save css styling for an html template
         * @param {SaveStyleRequest} saveStyleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveStyle: async (saveStyleRequest: SaveStyleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saveStyleRequest' is not null or undefined
            assertParamExists('saveStyle', 'saveStyleRequest', saveStyleRequest)
            const localVarPath = `/pdf/style`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveStyleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PdfApi - functional programming interface
 * @export
 */
export const PdfApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PdfApiAxiosParamCreator(configuration)
    return {
        /**
         * Convert html to PDF
         * @summary Convert html to PDF
         * @param {PdfGenerateRequest} pdfGenerateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertToPdf(pdfGenerateRequest: PdfGenerateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertToPdf(pdfGenerateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfApi.convertToPdf']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Save css styling for an html template
         * @summary Save css styling for an html template
         * @param {SaveStyleRequest} saveStyleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveStyle(saveStyleRequest: SaveStyleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveStyle(saveStyleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfApi.saveStyle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PdfApi - factory interface
 * @export
 */
export const PdfApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PdfApiFp(configuration)
    return {
        /**
         * Convert html to PDF
         * @summary Convert html to PDF
         * @param {PdfGenerateRequest} pdfGenerateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertToPdf(pdfGenerateRequest: PdfGenerateRequest, options?: any): AxiosPromise<string> {
            return localVarFp.convertToPdf(pdfGenerateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save css styling for an html template
         * @summary Save css styling for an html template
         * @param {SaveStyleRequest} saveStyleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveStyle(saveStyleRequest: SaveStyleRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.saveStyle(saveStyleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PdfApi - object-oriented interface
 * @export
 * @class PdfApi
 * @extends {BaseAPI}
 */
export class PdfApi extends BaseAPI {
    /**
     * Convert html to PDF
     * @summary Convert html to PDF
     * @param {PdfGenerateRequest} pdfGenerateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfApi
     */
    public convertToPdf(pdfGenerateRequest: PdfGenerateRequest, options?: RawAxiosRequestConfig) {
        return PdfApiFp(this.configuration).convertToPdf(pdfGenerateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save css styling for an html template
     * @summary Save css styling for an html template
     * @param {SaveStyleRequest} saveStyleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfApi
     */
    public saveStyle(saveStyleRequest: SaveStyleRequest, options?: RawAxiosRequestConfig) {
        return PdfApiFp(this.configuration).saveStyle(saveStyleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ResumeApi - axios parameter creator
 * @export
 */
export const ResumeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate a resume given a job post
         * @param {GenerateResumeRequest} generateResumeRequest JobPost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateResume: async (generateResumeRequest: GenerateResumeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generateResumeRequest' is not null or undefined
            assertParamExists('generateResume', 'generateResumeRequest', generateResumeRequest)
            const localVarPath = `/resume/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateResumeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all resumes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllResumes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resumes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get resume by ID
         * @param {string} [resumeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResume: async (resumeId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (resumeId !== undefined) {
                localVarQueryParameter['resume_id'] = resumeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Whether the user has uploaded a base resume
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasBaseResume: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resume/base`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Parse a job post
         * @param {ParseJobPostRequest} parseJobPostRequest Job post html payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parsJobPost: async (parseJobPostRequest: ParseJobPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parseJobPostRequest' is not null or undefined
            assertParamExists('parsJobPost', 'parseJobPostRequest', parseJobPostRequest)
            const localVarPath = `/job-post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parseJobPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user resume
         * @summary Update user resume
         * @param {ResumeUpdateRequest} resumeUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResume: async (resumeUpdateRequest: ResumeUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resumeUpdateRequest' is not null or undefined
            assertParamExists('updateResume', 'resumeUpdateRequest', resumeUpdateRequest)
            const localVarPath = `/resume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resumeUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update template ID
         * @summary Update template ID
         * @param {ResumeTemplateUpdateRequest} resumeTemplateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateId: async (resumeTemplateUpdateRequest: ResumeTemplateUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resumeTemplateUpdateRequest' is not null or undefined
            assertParamExists('updateTemplateId', 'resumeTemplateUpdateRequest', resumeTemplateUpdateRequest)
            const localVarPath = `/resume/template-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resumeTemplateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload user resume
         * @summary Upload user resume
         * @param {ResumeUploadRequest} resumeUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResume: async (resumeUploadRequest: ResumeUploadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resumeUploadRequest' is not null or undefined
            assertParamExists('uploadResume', 'resumeUploadRequest', resumeUploadRequest)
            const localVarPath = `/resume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resumeUploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResumeApi - functional programming interface
 * @export
 */
export const ResumeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResumeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generate a resume given a job post
         * @param {GenerateResumeRequest} generateResumeRequest JobPost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateResume(generateResumeRequest: GenerateResumeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratedResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateResume(generateResumeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResumeApi.generateResume']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all resumes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllResumes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResumeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllResumes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResumeApi.getAllResumes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get resume by ID
         * @param {string} [resumeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResume(resumeId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResumeData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResume(resumeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResumeApi.getResume']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Whether the user has uploaded a base resume
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hasBaseResume(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hasBaseResume(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResumeApi.hasBaseResume']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Parse a job post
         * @param {ParseJobPostRequest} parseJobPostRequest Job post html payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parsJobPost(parseJobPostRequest: ParseJobPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parsJobPost(parseJobPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResumeApi.parsJobPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update user resume
         * @summary Update user resume
         * @param {ResumeUpdateRequest} resumeUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResume(resumeUpdateRequest: ResumeUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResume(resumeUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResumeApi.updateResume']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update template ID
         * @summary Update template ID
         * @param {ResumeTemplateUpdateRequest} resumeTemplateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplateId(resumeTemplateUpdateRequest: ResumeTemplateUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplateId(resumeTemplateUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResumeApi.updateTemplateId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload user resume
         * @summary Upload user resume
         * @param {ResumeUploadRequest} resumeUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadResume(resumeUploadRequest: ResumeUploadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResumeUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadResume(resumeUploadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResumeApi.uploadResume']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ResumeApi - factory interface
 * @export
 */
export const ResumeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResumeApiFp(configuration)
    return {
        /**
         * 
         * @summary Generate a resume given a job post
         * @param {GenerateResumeRequest} generateResumeRequest JobPost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateResume(generateResumeRequest: GenerateResumeRequest, options?: any): AxiosPromise<GeneratedResume> {
            return localVarFp.generateResume(generateResumeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all resumes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllResumes(options?: any): AxiosPromise<ResumeList> {
            return localVarFp.getAllResumes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get resume by ID
         * @param {string} [resumeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResume(resumeId?: string, options?: any): AxiosPromise<ResumeData> {
            return localVarFp.getResume(resumeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Whether the user has uploaded a base resume
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasBaseResume(options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.hasBaseResume(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Parse a job post
         * @param {ParseJobPostRequest} parseJobPostRequest Job post html payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parsJobPost(parseJobPostRequest: ParseJobPostRequest, options?: any): AxiosPromise<JobPost> {
            return localVarFp.parsJobPost(parseJobPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user resume
         * @summary Update user resume
         * @param {ResumeUpdateRequest} resumeUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResume(resumeUpdateRequest: ResumeUpdateRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.updateResume(resumeUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update template ID
         * @summary Update template ID
         * @param {ResumeTemplateUpdateRequest} resumeTemplateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateId(resumeTemplateUpdateRequest: ResumeTemplateUpdateRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.updateTemplateId(resumeTemplateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload user resume
         * @summary Upload user resume
         * @param {ResumeUploadRequest} resumeUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResume(resumeUploadRequest: ResumeUploadRequest, options?: any): AxiosPromise<ResumeUploadResponse> {
            return localVarFp.uploadResume(resumeUploadRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResumeApi - object-oriented interface
 * @export
 * @class ResumeApi
 * @extends {BaseAPI}
 */
export class ResumeApi extends BaseAPI {
    /**
     * 
     * @summary Generate a resume given a job post
     * @param {GenerateResumeRequest} generateResumeRequest JobPost ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public generateResume(generateResumeRequest: GenerateResumeRequest, options?: RawAxiosRequestConfig) {
        return ResumeApiFp(this.configuration).generateResume(generateResumeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all resumes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public getAllResumes(options?: RawAxiosRequestConfig) {
        return ResumeApiFp(this.configuration).getAllResumes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get resume by ID
     * @param {string} [resumeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public getResume(resumeId?: string, options?: RawAxiosRequestConfig) {
        return ResumeApiFp(this.configuration).getResume(resumeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Whether the user has uploaded a base resume
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public hasBaseResume(options?: RawAxiosRequestConfig) {
        return ResumeApiFp(this.configuration).hasBaseResume(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Parse a job post
     * @param {ParseJobPostRequest} parseJobPostRequest Job post html payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public parsJobPost(parseJobPostRequest: ParseJobPostRequest, options?: RawAxiosRequestConfig) {
        return ResumeApiFp(this.configuration).parsJobPost(parseJobPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user resume
     * @summary Update user resume
     * @param {ResumeUpdateRequest} resumeUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public updateResume(resumeUpdateRequest: ResumeUpdateRequest, options?: RawAxiosRequestConfig) {
        return ResumeApiFp(this.configuration).updateResume(resumeUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update template ID
     * @summary Update template ID
     * @param {ResumeTemplateUpdateRequest} resumeTemplateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public updateTemplateId(resumeTemplateUpdateRequest: ResumeTemplateUpdateRequest, options?: RawAxiosRequestConfig) {
        return ResumeApiFp(this.configuration).updateTemplateId(resumeTemplateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload user resume
     * @summary Upload user resume
     * @param {ResumeUploadRequest} resumeUploadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public uploadResume(resumeUploadRequest: ResumeUploadRequest, options?: RawAxiosRequestConfig) {
        return ResumeApiFp(this.configuration).uploadResume(resumeUploadRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exchange a short-lived Firebase token for a long-lived, self-signed token
         * @summary Exchange token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/token-exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Exchange a short-lived Firebase token for a long-lived, self-signed token
         * @summary Exchange token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exchangeToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exchangeToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.exchangeToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserprofile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Exchange a short-lived Firebase token for a long-lived, self-signed token
         * @summary Exchange token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeToken(options?: any): AxiosPromise<SessionUser> {
            return localVarFp.exchangeToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile(options?: any): AxiosPromise<SessionUser> {
            return localVarFp.getUserprofile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Exchange a short-lived Firebase token for a long-lived, self-signed token
     * @summary Exchange token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public exchangeToken(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).exchangeToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user profile or create one if it doesn\'t exist
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserprofile(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserprofile(options).then((request) => request(this.axios, this.basePath));
    }
}



